<?xml version="1.0" encoding="utf-8"?>
<!-- Read this before creating packages: https://docs.chocolatey.org/en-us/create/create-packages -->
<!-- It is especially important to read the above link to understand additional requirements when publishing packages to the community feed aka dot org (https://community.chocolatey.org/packages). -->

<!-- Test your packages in a test environment: https://github.com/chocolatey/chocolatey-test-environment -->

<!--
This is a nuspec. It mostly adheres to https://docs.nuget.org/create/Nuspec-Reference. Chocolatey uses a special version of NuGet.Core that allows us to do more than was initially possible. As such there are certain things to be aware of:

* the package xmlns schema url may cause issues with nuget.exe
* Any of the following elements can ONLY be used by choco tools - projectSourceUrl, docsUrl, mailingListUrl, bugTrackerUrl, packageSourceUrl, provides, conflicts, replaces
* nuget.exe can still install packages with those elements but they are ignored. Any authoring tools or commands will error on those elements
-->

<!-- You can embed software files directly into packages, as long as you are not bound by distribution rights. -->
<!-- * If you are an organization making private packages, you probably have no issues here -->
<!-- * If you are releasing to the community feed, you need to consider distribution rights. -->
<!-- Do not remove this test for UTF-8: if “Ω” doesn’t appear as greek uppercase omega letter enclosed in quotation marks, you should use an editor that supports UTF-8, not this one. -->
<package xmlns="http://schemas.microsoft.com/packaging/2015/06/nuspec.xsd">
  <metadata>
    <!-- == PACKAGE SPECIFIC SECTION == -->
    <!-- This section is about this package, although id and version have ties back to the software -->
    <!-- id is lowercase and if you want a good separator for words, use '-', not '.'. Dots are only acceptable as suffixes for certain types of packages, e.g. .install, .portable, .extension, .template -->
    <!-- If the software is cross-platform, attempt to use the same id as the debian/rpm package(s) if possible. -->
    <id>windows7games</id>
    <!-- version should MATCH as closely as possible with the underlying software -->
    <!-- Is the version a prerelease of a version? https://docs.nuget.org/create/versioning#creating-prerelease-packages -->
    <!-- Note that unstable versions like 0.0.1 can be considered a released version, but it's possible that one can release a 0.0.1-beta before you release a 0.0.1 version. If the version number is final, that is considered a released version and not a prerelease. -->
    <version>3.1</version>
    <!-- <packageSourceUrl>Where is this Chocolatey package located (think GitHub)? packageSourceUrl is highly recommended for the community feed</packageSourceUrl>-->
    <!-- owners is a poor name for maintainers of the package. It sticks around by this name for compatibility reasons. It basically means you. -->
    <owners>Patrick Henkelmann</owners>
    <!-- ============================== -->

    <!-- == SOFTWARE SPECIFIC SECTION == -->
    <!-- This section is about the software itself -->
    <title>Windows 7 Games</title>
    <authors>Microsoft Corp.</authors>
    <!-- projectUrl is required for the community feed -->
    <projectUrl>https://win7games.com/</projectUrl>
    <!-- There are a number of CDN Services that can be used for hosting the Icon for a package. More information can be found here: https://docs.chocolatey.org/en-us/create/create-packages#package-icon-guidelines -->
    <!-- Here is an example using Githack -->
    <iconUrl>https://static.wikia.nocookie.net/logopedia/images/4/47/Games_win-10.png/revision/latest?cb=20220713031354</iconUrl>
    <!-- <copyright>Year Software Vendor</copyright> -->
    <!-- If there is a license Url available, it is required for the community feed -->
    <!-- <licenseUrl>Software License Location __REMOVE_OR_FILL_OUT__</licenseUrl>
    <requireLicenseAcceptance>true</requireLicenseAcceptance>-->
    <projectSourceUrl>https://github.com/Stiles96/ChocolateyPackages</projectSourceUrl>
    <docsUrl>https://win7games.com/</docsUrl>
    <!--<mailingListUrl></mailingListUrl>-->
    <!--<bugTrackerUrl></bugTrackerUrl>-->
    <tags>windows7games games</tags>
    <summary>Starting in Windows 8, the OS comes without the classic Windows 7 games. They are no longer included with Windows 11, Windows 10 and Windows 8.1. Here is a Windows 7 Games package which solves this issue. This Windows 7 Games package is compatible with all builds of Windows 11, Windows 10, Windows 8.1 and Windows 8.</summary>
    <description>
It includes the following software:

  - Solitaire
  - Spider Solitaire
  - Minesweeper
  - FreeCell
  - Hearts
  - Chess Titans
  - Mahjong Titans
  - Purble Place
  - Internet Spades
  - Internet Checkers
  - Internet Backgammon

For more details on how to install and use the games, check out [this tutorial](https://winaero.com/download-windows-7-games-for-windows-11/).

The package can be installed in unattend mode. Use the `/S` command argument, where S is capitalized. `Windows7Games_for_Windows_11_10_8.exe /S`.

Games support the complete set of MUI (language packs), so they will run in your native language. The following languages are supported:
 - ar-SA
 - bg-BG
 - cs-CZ
 - da-DK
 - de-DE
 - el-GR
 - en-US
 - es-ES
 - et-EE
 - fi-FI
 - fr-FR
 - he-IL
 - hr-HR
 - hu-HU
 - it-IT
 - ja-JP
 - ko-KR
 - lt-LT
 - lv-LV
 - nb-NO
 - nl-NL
 - pl-PL
 - pt-BR
 - pt-PT
 - ro-RO
 - ru-RU
 - sk-SK
 - sl-SI
 - sr-Latn-CS
 - sv-SE
 - th-TH
 - tr-TR
 - uk-UA
 - zh-CN
 - zh-TW
    </description>
    <releaseNotes>
The package has been updated to version 3.1. It now supports Windows 11 and fixes the error "Error opening file for writing: C:\Windows\System32\en-US\cmncliM.dll.mui". The non-working Game Explorer will no longer be installed. The installer now supports HiDPI displays. Finally, the Internet Games set is now optional, since Microsoft has turned off the game servers, making it nearly impossible to play them.

The support for older Windows version, i.e. Windows 8.1/8 and Windows 10, remains intact. You can use this new version of the package on older Windows versions too.
    </releaseNotes>
    <!-- =============================== -->

    <!-- Specifying dependencies and version ranges? https://docs.nuget.org/create/versioning#specifying-version-ranges-in-.nuspec-files -->
    <!--<dependencies>
      <dependency id="" version="__MINIMUM_VERSION__" />
      <dependency id="" version="[__EXACT_VERSION__]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_INCLUSIVE]" />
      <dependency id="" version="[_MIN_VERSION_INCLUSIVE, MAX_VERSION_EXCLUSIVE)" />
      <dependency id="" />
      <dependency id="chocolatey-core.extension" version="1.1.0" />
    </dependencies>-->
    <!-- chocolatey-core.extension - https://community.chocolatey.org/packages/chocolatey-core.extension -->

    <!--<provides>NOT YET IMPLEMENTED</provides>-->
    <!--<conflicts>NOT YET IMPLEMENTED</conflicts>-->
    <!--<replaces>NOT YET IMPLEMENTED</replaces>-->
  </metadata>
  <files>
    <!-- this section controls what actually gets packaged into the Chocolatey package -->
    <file src="tools\**" target="tools" />
  </files>
</package>
